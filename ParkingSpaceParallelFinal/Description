This code utilizes parallel processing to simultaneously 
check the number of parking spaces.

Specifically, it employs ThreadPoolExecutor to attempt to concurrently 
check each parking space position..


# Function for parallel checking of empty parking spaces
def check_parking_space_parallel(img_processed):
    space_counter = 0

    with ThreadPoolExecutor() as executor:
        # Check parking spaces in parallel
        futures = [executor.submit(check_parking_space_single, img_processed, pos) for pos in posList]
        # Count total empty parking spaces
        for future in futures:
            count = future.result()
            if count is not None and count < 950:
                space_counter += 1

    # Display the count of empty parking spaces on the screen
    cvzone.putTextRect(img, f'Free {space_counter}/ {len(posList)}', (100, 50), scale=3,
                       thickness=5, offset=20, colorR=(0, 200, 0))

This code segment invokes the check_parking_space_single function for each parking space position simultaneously using 
ThreadPoolExecutor. Consequently, each parking space is independently checked, and the processes occur concurrently.
